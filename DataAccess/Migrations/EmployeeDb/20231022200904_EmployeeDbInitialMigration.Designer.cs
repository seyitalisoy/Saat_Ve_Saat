// <auto-generated />
using System;
using DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations.EmployeeDb
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20231022200904_EmployeeDbInitialMigration")]
    partial class EmployeeDbInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("Content")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnnouncementId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            AnnouncementId = 1,
                            Content = "23 Nisan Ulusual Egemenlik ve Çocuk Bayramımız kutlu olsun.",
                            ImageUrl = "/images/1.jpg",
                            Title = "23 Nisan"
                        },
                        new
                        {
                            AnnouncementId = 2,
                            Content = "Eylül ayı toplantılarımız başlıyor.",
                            ImageUrl = "/images/2.jpg",
                            Title = "Toplantılar Başlıyor"
                        },
                        new
                        {
                            AnnouncementId = 3,
                            Content = "Geleneksel Saat fuarı İstanbul'da başlıyor.",
                            ImageUrl = "/images/3.jpg",
                            Title = "Saat Fuarı"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerText = "Beğendim",
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerText = "Beğenmedim",
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerText = "İstanbul",
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerText = "Ankara",
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 5,
                            AnswerText = "İzmir",
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 6,
                            AnswerText = "Trabzon",
                            QuestionId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "İnsan Kaynakları"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Bilgi İşlem"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BirthDay = new DateTime(1995, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfHire = new DateTime(2013, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Ahmet",
                            LastName = "Yılmaz",
                            PhoneNumber = "5303232131",
                            PositionId = 1,
                            TcNo = "12345678912"
                        },
                        new
                        {
                            EmployeeId = 2,
                            BirthDay = new DateTime(1998, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfHire = new DateTime(2015, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Mehmet",
                            LastName = "Hakan",
                            PhoneNumber = "5303232141",
                            PositionId = 2,
                            TcNo = "22245678912"
                        },
                        new
                        {
                            EmployeeId = 3,
                            BirthDay = new DateTime(1989, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfHire = new DateTime(2020, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Cevdet",
                            LastName = "DeliGül",
                            PhoneNumber = "5303232145",
                            PositionId = 1,
                            TcNo = "22245678455"
                        },
                        new
                        {
                            EmployeeId = 4,
                            BirthDay = new DateTime(1991, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfHire = new DateTime(2022, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            FirstName = "Haldun",
                            LastName = "Kara",
                            PhoneNumber = "5373232174",
                            PositionId = 2,
                            TcNo = "22245678488"
                        },
                        new
                        {
                            EmployeeId = 5,
                            BirthDay = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfHire = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            FirstName = "Zeynep",
                            LastName = "Arkadaş",
                            PhoneNumber = "5553232193",
                            PositionId = 2,
                            TcNo = "22245678404"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"));

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            PositionName = "Yönetici"
                        },
                        new
                        {
                            PositionId = 2,
                            PositionName = "Stajyer"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionText = "Bugünkü yemekleri beğendiniz mi?"
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionText = "Düzenleyeceğimiz gezide nereye gitmek istersiniz?"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Entities.Concrete.Answer", b =>
                {
                    b.HasOne("Entities.Concrete.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entities.Concrete.Employee", b =>
                {
                    b.HasOne("Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Entities.Concrete.UserAnswer", b =>
                {
                    b.HasOne("Entities.Concrete.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Concrete.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
